/// Translated from C to D
module glfw3.xkb_unicode;

@nogc nothrow:
extern(C): __gshared:

//========================================================================
// GLFW 3.3 X11 - www.glfw.org
//------------------------------------------------------------------------
// Copyright (c) 2002-2006 Marcus Geelnard
// Copyright (c) 2006-2017 Camilla LÃ¶wy <elmindreda@glfw.org>
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//    claim that you wrote the original software. If you use this software
//    in a product, an acknowledgment in the product documentation would
//    be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such, and must not
//    be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source
//    distribution.
//
//========================================================================
// It is fine to use C99 in this file because it will not be built with VS
//========================================================================

import glfw3.internal;

/*
 * Marcus: This code was originally written by Markus G. Kuhn.
 * I have made some slight changes (trimmed it down a bit from >60 KB to
 * 20 KB), but the functionality is the same.
 */

/*
 * This module converts keysym values into the corresponding ISO 10646
 * (UCS, Unicode) values.
 *
 * The array keysymtab[] contains pairs of X11 keysym values for graphical
 * characters and the corresponding Unicode value. The function
 * _glfwKeySym2Unicode() maps a keysym onto a Unicode value using a binary
 * search, therefore keysymtab[] must remain SORTED by keysym value.
 *
 * We allow to represent any UCS character in the range U-00000000 to
 * U-00FFFFFF by a keysym value in the range 0x01000000 to 0x01ffffff.
 * This admittedly does not cover the entire 31-bit space of UCS, but
 * it does cover all of the characters up to U-10FFFF, which can be
 * represented by UTF-16, and more, and it is very unlikely that higher
 * UCS codes will ever be assigned by ISO. So to get Unicode character
 * U+ABCD you can directly use keysym 0x0100abcd.
 *
 * Original author: Markus G. Kuhn <mkuhn@acm.org>, University of
 *                  Cambridge, April 2001
 *
 * Special thanks to Richard Verhoeven <river@win.tue.nl> for preparing
 * an initial draft of the mapping table.
 *
 */


//************************************************************************
//****                KeySym to Unicode mapping table                 ****
//************************************************************************

struct codepair {
  ushort keysym;
  ushort ucs;
}
private alias P = codepair;

private immutable codepair[828] keysymtab = [
  P( 0x01a1, 0x0104 ),
  P( 0x01a2, 0x02d8 ),
  P( 0x01a3, 0x0141 ),
  P( 0x01a5, 0x013d ),
  P( 0x01a6, 0x015a ),
  P( 0x01a9, 0x0160 ),
  P( 0x01aa, 0x015e ),
  P( 0x01ab, 0x0164 ),
  P( 0x01ac, 0x0179 ),
  P( 0x01ae, 0x017d ),
  P( 0x01af, 0x017b ),
  P( 0x01b1, 0x0105 ),
  P( 0x01b2, 0x02db ),
  P( 0x01b3, 0x0142 ),
  P( 0x01b5, 0x013e ),
  P( 0x01b6, 0x015b ),
  P( 0x01b7, 0x02c7 ),
  P( 0x01b9, 0x0161 ),
  P( 0x01ba, 0x015f ),
  P( 0x01bb, 0x0165 ),
  P( 0x01bc, 0x017a ),
  P( 0x01bd, 0x02dd ),
  P( 0x01be, 0x017e ),
  P( 0x01bf, 0x017c ),
  P( 0x01c0, 0x0154 ),
  P( 0x01c3, 0x0102 ),
  P( 0x01c5, 0x0139 ),
  P( 0x01c6, 0x0106 ),
  P( 0x01c8, 0x010c ),
  P( 0x01ca, 0x0118 ),
  P( 0x01cc, 0x011a ),
  P( 0x01cf, 0x010e ),
  P( 0x01d0, 0x0110 ),
  P( 0x01d1, 0x0143 ),
  P( 0x01d2, 0x0147 ),
  P( 0x01d5, 0x0150 ),
  P( 0x01d8, 0x0158 ),
  P( 0x01d9, 0x016e ),
  P( 0x01db, 0x0170 ),
  P( 0x01de, 0x0162 ),
  P( 0x01e0, 0x0155 ),
  P( 0x01e3, 0x0103 ),
  P( 0x01e5, 0x013a ),
  P( 0x01e6, 0x0107 ),
  P( 0x01e8, 0x010d ),
  P( 0x01ea, 0x0119 ),
  P( 0x01ec, 0x011b ),
  P( 0x01ef, 0x010f ),
  P( 0x01f0, 0x0111 ),
  P( 0x01f1, 0x0144 ),
  P( 0x01f2, 0x0148 ),
  P( 0x01f5, 0x0151 ),
  P( 0x01f8, 0x0159 ),
  P( 0x01f9, 0x016f ),
  P( 0x01fb, 0x0171 ),
  P( 0x01fe, 0x0163 ),
  P( 0x01ff, 0x02d9 ),
  P( 0x02a1, 0x0126 ),
  P( 0x02a6, 0x0124 ),
  P( 0x02a9, 0x0130 ),
  P( 0x02ab, 0x011e ),
  P( 0x02ac, 0x0134 ),
  P( 0x02b1, 0x0127 ),
  P( 0x02b6, 0x0125 ),
  P( 0x02b9, 0x0131 ),
  P( 0x02bb, 0x011f ),
  P( 0x02bc, 0x0135 ),
  P( 0x02c5, 0x010a ),
  P( 0x02c6, 0x0108 ),
  P( 0x02d5, 0x0120 ),
  P( 0x02d8, 0x011c ),
  P( 0x02dd, 0x016c ),
  P( 0x02de, 0x015c ),
  P( 0x02e5, 0x010b ),
  P( 0x02e6, 0x0109 ),
  P( 0x02f5, 0x0121 ),
  P( 0x02f8, 0x011d ),
  P( 0x02fd, 0x016d ),
  P( 0x02fe, 0x015d ),
  P( 0x03a2, 0x0138 ),
  P( 0x03a3, 0x0156 ),
  P( 0x03a5, 0x0128 ),
  P( 0x03a6, 0x013b ),
  P( 0x03aa, 0x0112 ),
  P( 0x03ab, 0x0122 ),
  P( 0x03ac, 0x0166 ),
  P( 0x03b3, 0x0157 ),
  P( 0x03b5, 0x0129 ),
  P( 0x03b6, 0x013c ),
  P( 0x03ba, 0x0113 ),
  P( 0x03bb, 0x0123 ),
  P( 0x03bc, 0x0167 ),
  P( 0x03bd, 0x014a ),
  P( 0x03bf, 0x014b ),
  P( 0x03c0, 0x0100 ),
  P( 0x03c7, 0x012e ),
  P( 0x03cc, 0x0116 ),
  P( 0x03cf, 0x012a ),
  P( 0x03d1, 0x0145 ),
  P( 0x03d2, 0x014c ),
  P( 0x03d3, 0x0136 ),
  P( 0x03d9, 0x0172 ),
  P( 0x03dd, 0x0168 ),
  P( 0x03de, 0x016a ),
  P( 0x03e0, 0x0101 ),
  P( 0x03e7, 0x012f ),
  P( 0x03ec, 0x0117 ),
  P( 0x03ef, 0x012b ),
  P( 0x03f1, 0x0146 ),
  P( 0x03f2, 0x014d ),
  P( 0x03f3, 0x0137 ),
  P( 0x03f9, 0x0173 ),
  P( 0x03fd, 0x0169 ),
  P( 0x03fe, 0x016b ),
  P( 0x047e, 0x203e ),
  P( 0x04a1, 0x3002 ),
  P( 0x04a2, 0x300c ),
  P( 0x04a3, 0x300d ),
  P( 0x04a4, 0x3001 ),
  P( 0x04a5, 0x30fb ),
  P( 0x04a6, 0x30f2 ),
  P( 0x04a7, 0x30a1 ),
  P( 0x04a8, 0x30a3 ),
  P( 0x04a9, 0x30a5 ),
  P( 0x04aa, 0x30a7 ),
  P( 0x04ab, 0x30a9 ),
  P( 0x04ac, 0x30e3 ),
  P( 0x04ad, 0x30e5 ),
  P( 0x04ae, 0x30e7 ),
  P( 0x04af, 0x30c3 ),
  P( 0x04b0, 0x30fc ),
  P( 0x04b1, 0x30a2 ),
  P( 0x04b2, 0x30a4 ),
  P( 0x04b3, 0x30a6 ),
  P( 0x04b4, 0x30a8 ),
  P( 0x04b5, 0x30aa ),
  P( 0x04b6, 0x30ab ),
  P( 0x04b7, 0x30ad ),
  P( 0x04b8, 0x30af ),
  P( 0x04b9, 0x30b1 ),
  P( 0x04ba, 0x30b3 ),
  P( 0x04bb, 0x30b5 ),
  P( 0x04bc, 0x30b7 ),
  P( 0x04bd, 0x30b9 ),
  P( 0x04be, 0x30bb ),
  P( 0x04bf, 0x30bd ),
  P( 0x04c0, 0x30bf ),
  P( 0x04c1, 0x30c1 ),
  P( 0x04c2, 0x30c4 ),
  P( 0x04c3, 0x30c6 ),
  P( 0x04c4, 0x30c8 ),
  P( 0x04c5, 0x30ca ),
  P( 0x04c6, 0x30cb ),
  P( 0x04c7, 0x30cc ),
  P( 0x04c8, 0x30cd ),
  P( 0x04c9, 0x30ce ),
  P( 0x04ca, 0x30cf ),
  P( 0x04cb, 0x30d2 ),
  P( 0x04cc, 0x30d5 ),
  P( 0x04cd, 0x30d8 ),
  P( 0x04ce, 0x30db ),
  P( 0x04cf, 0x30de ),
  P( 0x04d0, 0x30df ),
  P( 0x04d1, 0x30e0 ),
  P( 0x04d2, 0x30e1 ),
  P( 0x04d3, 0x30e2 ),
  P( 0x04d4, 0x30e4 ),
  P( 0x04d5, 0x30e6 ),
  P( 0x04d6, 0x30e8 ),
  P( 0x04d7, 0x30e9 ),
  P( 0x04d8, 0x30ea ),
  P( 0x04d9, 0x30eb ),
  P( 0x04da, 0x30ec ),
  P( 0x04db, 0x30ed ),
  P( 0x04dc, 0x30ef ),
  P( 0x04dd, 0x30f3 ),
  P( 0x04de, 0x309b ),
  P( 0x04df, 0x309c ),
  P( 0x05ac, 0x060c ),
  P( 0x05bb, 0x061b ),
  P( 0x05bf, 0x061f ),
  P( 0x05c1, 0x0621 ),
  P( 0x05c2, 0x0622 ),
  P( 0x05c3, 0x0623 ),
  P( 0x05c4, 0x0624 ),
  P( 0x05c5, 0x0625 ),
  P( 0x05c6, 0x0626 ),
  P( 0x05c7, 0x0627 ),
  P( 0x05c8, 0x0628 ),
  P( 0x05c9, 0x0629 ),
  P( 0x05ca, 0x062a ),
  P( 0x05cb, 0x062b ),
  P( 0x05cc, 0x062c ),
  P( 0x05cd, 0x062d ),
  P( 0x05ce, 0x062e ),
  P( 0x05cf, 0x062f ),
  P( 0x05d0, 0x0630 ),
  P( 0x05d1, 0x0631 ),
  P( 0x05d2, 0x0632 ),
  P( 0x05d3, 0x0633 ),
  P( 0x05d4, 0x0634 ),
  P( 0x05d5, 0x0635 ),
  P( 0x05d6, 0x0636 ),
  P( 0x05d7, 0x0637 ),
  P( 0x05d8, 0x0638 ),
  P( 0x05d9, 0x0639 ),
  P( 0x05da, 0x063a ),
  P( 0x05e0, 0x0640 ),
  P( 0x05e1, 0x0641 ),
  P( 0x05e2, 0x0642 ),
  P( 0x05e3, 0x0643 ),
  P( 0x05e4, 0x0644 ),
  P( 0x05e5, 0x0645 ),
  P( 0x05e6, 0x0646 ),
  P( 0x05e7, 0x0647 ),
  P( 0x05e8, 0x0648 ),
  P( 0x05e9, 0x0649 ),
  P( 0x05ea, 0x064a ),
  P( 0x05eb, 0x064b ),
  P( 0x05ec, 0x064c ),
  P( 0x05ed, 0x064d ),
  P( 0x05ee, 0x064e ),
  P( 0x05ef, 0x064f ),
  P( 0x05f0, 0x0650 ),
  P( 0x05f1, 0x0651 ),
  P( 0x05f2, 0x0652 ),
  P( 0x06a1, 0x0452 ),
  P( 0x06a2, 0x0453 ),
  P( 0x06a3, 0x0451 ),
  P( 0x06a4, 0x0454 ),
  P( 0x06a5, 0x0455 ),
  P( 0x06a6, 0x0456 ),
  P( 0x06a7, 0x0457 ),
  P( 0x06a8, 0x0458 ),
  P( 0x06a9, 0x0459 ),
  P( 0x06aa, 0x045a ),
  P( 0x06ab, 0x045b ),
  P( 0x06ac, 0x045c ),
  P( 0x06ae, 0x045e ),
  P( 0x06af, 0x045f ),
  P( 0x06b0, 0x2116 ),
  P( 0x06b1, 0x0402 ),
  P( 0x06b2, 0x0403 ),
  P( 0x06b3, 0x0401 ),
  P( 0x06b4, 0x0404 ),
  P( 0x06b5, 0x0405 ),
  P( 0x06b6, 0x0406 ),
  P( 0x06b7, 0x0407 ),
  P( 0x06b8, 0x0408 ),
  P( 0x06b9, 0x0409 ),
  P( 0x06ba, 0x040a ),
  P( 0x06bb, 0x040b ),
  P( 0x06bc, 0x040c ),
  P( 0x06be, 0x040e ),
  P( 0x06bf, 0x040f ),
  P( 0x06c0, 0x044e ),
  P( 0x06c1, 0x0430 ),
  P( 0x06c2, 0x0431 ),
  P( 0x06c3, 0x0446 ),
  P( 0x06c4, 0x0434 ),
  P( 0x06c5, 0x0435 ),
  P( 0x06c6, 0x0444 ),
  P( 0x06c7, 0x0433 ),
  P( 0x06c8, 0x0445 ),
  P( 0x06c9, 0x0438 ),
  P( 0x06ca, 0x0439 ),
  P( 0x06cb, 0x043a ),
  P( 0x06cc, 0x043b ),
  P( 0x06cd, 0x043c ),
  P( 0x06ce, 0x043d ),
  P( 0x06cf, 0x043e ),
  P( 0x06d0, 0x043f ),
  P( 0x06d1, 0x044f ),
  P( 0x06d2, 0x0440 ),
  P( 0x06d3, 0x0441 ),
  P( 0x06d4, 0x0442 ),
  P( 0x06d5, 0x0443 ),
  P( 0x06d6, 0x0436 ),
  P( 0x06d7, 0x0432 ),
  P( 0x06d8, 0x044c ),
  P( 0x06d9, 0x044b ),
  P( 0x06da, 0x0437 ),
  P( 0x06db, 0x0448 ),
  P( 0x06dc, 0x044d ),
  P( 0x06dd, 0x0449 ),
  P( 0x06de, 0x0447 ),
  P( 0x06df, 0x044a ),
  P( 0x06e0, 0x042e ),
  P( 0x06e1, 0x0410 ),
  P( 0x06e2, 0x0411 ),
  P( 0x06e3, 0x0426 ),
  P( 0x06e4, 0x0414 ),
  P( 0x06e5, 0x0415 ),
  P( 0x06e6, 0x0424 ),
  P( 0x06e7, 0x0413 ),
  P( 0x06e8, 0x0425 ),
  P( 0x06e9, 0x0418 ),
  P( 0x06ea, 0x0419 ),
  P( 0x06eb, 0x041a ),
  P( 0x06ec, 0x041b ),
  P( 0x06ed, 0x041c ),
  P( 0x06ee, 0x041d ),
  P( 0x06ef, 0x041e ),
  P( 0x06f0, 0x041f ),
  P( 0x06f1, 0x042f ),
  P( 0x06f2, 0x0420 ),
  P( 0x06f3, 0x0421 ),
  P( 0x06f4, 0x0422 ),
  P( 0x06f5, 0x0423 ),
  P( 0x06f6, 0x0416 ),
  P( 0x06f7, 0x0412 ),
  P( 0x06f8, 0x042c ),
  P( 0x06f9, 0x042b ),
  P( 0x06fa, 0x0417 ),
  P( 0x06fb, 0x0428 ),
  P( 0x06fc, 0x042d ),
  P( 0x06fd, 0x0429 ),
  P( 0x06fe, 0x0427 ),
  P( 0x06ff, 0x042a ),
  P( 0x07a1, 0x0386 ),
  P( 0x07a2, 0x0388 ),
  P( 0x07a3, 0x0389 ),
  P( 0x07a4, 0x038a ),
  P( 0x07a5, 0x03aa ),
  P( 0x07a7, 0x038c ),
  P( 0x07a8, 0x038e ),
  P( 0x07a9, 0x03ab ),
  P( 0x07ab, 0x038f ),
  P( 0x07ae, 0x0385 ),
  P( 0x07af, 0x2015 ),
  P( 0x07b1, 0x03ac ),
  P( 0x07b2, 0x03ad ),
  P( 0x07b3, 0x03ae ),
  P( 0x07b4, 0x03af ),
  P( 0x07b5, 0x03ca ),
  P( 0x07b6, 0x0390 ),
  P( 0x07b7, 0x03cc ),
  P( 0x07b8, 0x03cd ),
  P( 0x07b9, 0x03cb ),
  P( 0x07ba, 0x03b0 ),
  P( 0x07bb, 0x03ce ),
  P( 0x07c1, 0x0391 ),
  P( 0x07c2, 0x0392 ),
  P( 0x07c3, 0x0393 ),
  P( 0x07c4, 0x0394 ),
  P( 0x07c5, 0x0395 ),
  P( 0x07c6, 0x0396 ),
  P( 0x07c7, 0x0397 ),
  P( 0x07c8, 0x0398 ),
  P( 0x07c9, 0x0399 ),
  P( 0x07ca, 0x039a ),
  P( 0x07cb, 0x039b ),
  P( 0x07cc, 0x039c ),
  P( 0x07cd, 0x039d ),
  P( 0x07ce, 0x039e ),
  P( 0x07cf, 0x039f ),
  P( 0x07d0, 0x03a0 ),
  P( 0x07d1, 0x03a1 ),
  P( 0x07d2, 0x03a3 ),
  P( 0x07d4, 0x03a4 ),
  P( 0x07d5, 0x03a5 ),
  P( 0x07d6, 0x03a6 ),
  P( 0x07d7, 0x03a7 ),
  P( 0x07d8, 0x03a8 ),
  P( 0x07d9, 0x03a9 ),
  P( 0x07e1, 0x03b1 ),
  P( 0x07e2, 0x03b2 ),
  P( 0x07e3, 0x03b3 ),
  P( 0x07e4, 0x03b4 ),
  P( 0x07e5, 0x03b5 ),
  P( 0x07e6, 0x03b6 ),
  P( 0x07e7, 0x03b7 ),
  P( 0x07e8, 0x03b8 ),
  P( 0x07e9, 0x03b9 ),
  P( 0x07ea, 0x03ba ),
  P( 0x07eb, 0x03bb ),
  P( 0x07ec, 0x03bc ),
  P( 0x07ed, 0x03bd ),
  P( 0x07ee, 0x03be ),
  P( 0x07ef, 0x03bf ),
  P( 0x07f0, 0x03c0 ),
  P( 0x07f1, 0x03c1 ),
  P( 0x07f2, 0x03c3 ),
  P( 0x07f3, 0x03c2 ),
  P( 0x07f4, 0x03c4 ),
  P( 0x07f5, 0x03c5 ),
  P( 0x07f6, 0x03c6 ),
  P( 0x07f7, 0x03c7 ),
  P( 0x07f8, 0x03c8 ),
  P( 0x07f9, 0x03c9 ),
  P( 0x08a1, 0x23b7 ),
  P( 0x08a2, 0x250c ),
  P( 0x08a3, 0x2500 ),
  P( 0x08a4, 0x2320 ),
  P( 0x08a5, 0x2321 ),
  P( 0x08a6, 0x2502 ),
  P( 0x08a7, 0x23a1 ),
  P( 0x08a8, 0x23a3 ),
  P( 0x08a9, 0x23a4 ),
  P( 0x08aa, 0x23a6 ),
  P( 0x08ab, 0x239b ),
  P( 0x08ac, 0x239d ),
  P( 0x08ad, 0x239e ),
  P( 0x08ae, 0x23a0 ),
  P( 0x08af, 0x23a8 ),
  P( 0x08b0, 0x23ac ),
  P( 0x08bc, 0x2264 ),
  P( 0x08bd, 0x2260 ),
  P( 0x08be, 0x2265 ),
  P( 0x08bf, 0x222b ),
  P( 0x08c0, 0x2234 ),
  P( 0x08c1, 0x221d ),
  P( 0x08c2, 0x221e ),
  P( 0x08c5, 0x2207 ),
  P( 0x08c8, 0x223c ),
  P( 0x08c9, 0x2243 ),
  P( 0x08cd, 0x21d4 ),
  P( 0x08ce, 0x21d2 ),
  P( 0x08cf, 0x2261 ),
  P( 0x08d6, 0x221a ),
  P( 0x08da, 0x2282 ),
  P( 0x08db, 0x2283 ),
  P( 0x08dc, 0x2229 ),
  P( 0x08dd, 0x222a ),
  P( 0x08de, 0x2227 ),
  P( 0x08df, 0x2228 ),
  P( 0x08ef, 0x2202 ),
  P( 0x08f6, 0x0192 ),
  P( 0x08fb, 0x2190 ),
  P( 0x08fc, 0x2191 ),
  P( 0x08fd, 0x2192 ),
  P( 0x08fe, 0x2193 ),
  P( 0x09e0, 0x25c6 ),
  P( 0x09e1, 0x2592 ),
  P( 0x09e2, 0x2409 ),
  P( 0x09e3, 0x240c ),
  P( 0x09e4, 0x240d ),
  P( 0x09e5, 0x240a ),
  P( 0x09e8, 0x2424 ),
  P( 0x09e9, 0x240b ),
  P( 0x09ea, 0x2518 ),
  P( 0x09eb, 0x2510 ),
  P( 0x09ec, 0x250c ),
  P( 0x09ed, 0x2514 ),
  P( 0x09ee, 0x253c ),
  P( 0x09ef, 0x23ba ),
  P( 0x09f0, 0x23bb ),
  P( 0x09f1, 0x2500 ),
  P( 0x09f2, 0x23bc ),
  P( 0x09f3, 0x23bd ),
  P( 0x09f4, 0x251c ),
  P( 0x09f5, 0x2524 ),
  P( 0x09f6, 0x2534 ),
  P( 0x09f7, 0x252c ),
  P( 0x09f8, 0x2502 ),
  P( 0x0aa1, 0x2003 ),
  P( 0x0aa2, 0x2002 ),
  P( 0x0aa3, 0x2004 ),
  P( 0x0aa4, 0x2005 ),
  P( 0x0aa5, 0x2007 ),
  P( 0x0aa6, 0x2008 ),
  P( 0x0aa7, 0x2009 ),
  P( 0x0aa8, 0x200a ),
  P( 0x0aa9, 0x2014 ),
  P( 0x0aaa, 0x2013 ),
  P( 0x0aae, 0x2026 ),
  P( 0x0aaf, 0x2025 ),
  P( 0x0ab0, 0x2153 ),
  P( 0x0ab1, 0x2154 ),
  P( 0x0ab2, 0x2155 ),
  P( 0x0ab3, 0x2156 ),
  P( 0x0ab4, 0x2157 ),
  P( 0x0ab5, 0x2158 ),
  P( 0x0ab6, 0x2159 ),
  P( 0x0ab7, 0x215a ),
  P( 0x0ab8, 0x2105 ),
  P( 0x0abb, 0x2012 ),
  P( 0x0abc, 0x2329 ),
  P( 0x0abe, 0x232a ),
  P( 0x0ac3, 0x215b ),
  P( 0x0ac4, 0x215c ),
  P( 0x0ac5, 0x215d ),
  P( 0x0ac6, 0x215e ),
  P( 0x0ac9, 0x2122 ),
  P( 0x0aca, 0x2613 ),
  P( 0x0acc, 0x25c1 ),
  P( 0x0acd, 0x25b7 ),
  P( 0x0ace, 0x25cb ),
  P( 0x0acf, 0x25af ),
  P( 0x0ad0, 0x2018 ),
  P( 0x0ad1, 0x2019 ),
  P( 0x0ad2, 0x201c ),
  P( 0x0ad3, 0x201d ),
  P( 0x0ad4, 0x211e ),
  P( 0x0ad6, 0x2032 ),
  P( 0x0ad7, 0x2033 ),
  P( 0x0ad9, 0x271d ),
  P( 0x0adb, 0x25ac ),
  P( 0x0adc, 0x25c0 ),
  P( 0x0add, 0x25b6 ),
  P( 0x0ade, 0x25cf ),
  P( 0x0adf, 0x25ae ),
  P( 0x0ae0, 0x25e6 ),
  P( 0x0ae1, 0x25ab ),
  P( 0x0ae2, 0x25ad ),
  P( 0x0ae3, 0x25b3 ),
  P( 0x0ae4, 0x25bd ),
  P( 0x0ae5, 0x2606 ),
  P( 0x0ae6, 0x2022 ),
  P( 0x0ae7, 0x25aa ),
  P( 0x0ae8, 0x25b2 ),
  P( 0x0ae9, 0x25bc ),
  P( 0x0aea, 0x261c ),
  P( 0x0aeb, 0x261e ),
  P( 0x0aec, 0x2663 ),
  P( 0x0aed, 0x2666 ),
  P( 0x0aee, 0x2665 ),
  P( 0x0af0, 0x2720 ),
  P( 0x0af1, 0x2020 ),
  P( 0x0af2, 0x2021 ),
  P( 0x0af3, 0x2713 ),
  P( 0x0af4, 0x2717 ),
  P( 0x0af5, 0x266f ),
  P( 0x0af6, 0x266d ),
  P( 0x0af7, 0x2642 ),
  P( 0x0af8, 0x2640 ),
  P( 0x0af9, 0x260e ),
  P( 0x0afa, 0x2315 ),
  P( 0x0afb, 0x2117 ),
  P( 0x0afc, 0x2038 ),
  P( 0x0afd, 0x201a ),
  P( 0x0afe, 0x201e ),
  P( 0x0ba3, 0x003c ),
  P( 0x0ba6, 0x003e ),
  P( 0x0ba8, 0x2228 ),
  P( 0x0ba9, 0x2227 ),
  P( 0x0bc0, 0x00af ),
  P( 0x0bc2, 0x22a5 ),
  P( 0x0bc3, 0x2229 ),
  P( 0x0bc4, 0x230a ),
  P( 0x0bc6, 0x005f ),
  P( 0x0bca, 0x2218 ),
  P( 0x0bcc, 0x2395 ),
  P( 0x0bce, 0x22a4 ),
  P( 0x0bcf, 0x25cb ),
  P( 0x0bd3, 0x2308 ),
  P( 0x0bd6, 0x222a ),
  P( 0x0bd8, 0x2283 ),
  P( 0x0bda, 0x2282 ),
  P( 0x0bdc, 0x22a2 ),
  P( 0x0bfc, 0x22a3 ),
  P( 0x0cdf, 0x2017 ),
  P( 0x0ce0, 0x05d0 ),
  P( 0x0ce1, 0x05d1 ),
  P( 0x0ce2, 0x05d2 ),
  P( 0x0ce3, 0x05d3 ),
  P( 0x0ce4, 0x05d4 ),
  P( 0x0ce5, 0x05d5 ),
  P( 0x0ce6, 0x05d6 ),
  P( 0x0ce7, 0x05d7 ),
  P( 0x0ce8, 0x05d8 ),
  P( 0x0ce9, 0x05d9 ),
  P( 0x0cea, 0x05da ),
  P( 0x0ceb, 0x05db ),
  P( 0x0cec, 0x05dc ),
  P( 0x0ced, 0x05dd ),
  P( 0x0cee, 0x05de ),
  P( 0x0cef, 0x05df ),
  P( 0x0cf0, 0x05e0 ),
  P( 0x0cf1, 0x05e1 ),
  P( 0x0cf2, 0x05e2 ),
  P( 0x0cf3, 0x05e3 ),
  P( 0x0cf4, 0x05e4 ),
  P( 0x0cf5, 0x05e5 ),
  P( 0x0cf6, 0x05e6 ),
  P( 0x0cf7, 0x05e7 ),
  P( 0x0cf8, 0x05e8 ),
  P( 0x0cf9, 0x05e9 ),
  P( 0x0cfa, 0x05ea ),
  P( 0x0da1, 0x0e01 ),
  P( 0x0da2, 0x0e02 ),
  P( 0x0da3, 0x0e03 ),
  P( 0x0da4, 0x0e04 ),
  P( 0x0da5, 0x0e05 ),
  P( 0x0da6, 0x0e06 ),
  P( 0x0da7, 0x0e07 ),
  P( 0x0da8, 0x0e08 ),
  P( 0x0da9, 0x0e09 ),
  P( 0x0daa, 0x0e0a ),
  P( 0x0dab, 0x0e0b ),
  P( 0x0dac, 0x0e0c ),
  P( 0x0dad, 0x0e0d ),
  P( 0x0dae, 0x0e0e ),
  P( 0x0daf, 0x0e0f ),
  P( 0x0db0, 0x0e10 ),
  P( 0x0db1, 0x0e11 ),
  P( 0x0db2, 0x0e12 ),
  P( 0x0db3, 0x0e13 ),
  P( 0x0db4, 0x0e14 ),
  P( 0x0db5, 0x0e15 ),
  P( 0x0db6, 0x0e16 ),
  P( 0x0db7, 0x0e17 ),
  P( 0x0db8, 0x0e18 ),
  P( 0x0db9, 0x0e19 ),
  P( 0x0dba, 0x0e1a ),
  P( 0x0dbb, 0x0e1b ),
  P( 0x0dbc, 0x0e1c ),
  P( 0x0dbd, 0x0e1d ),
  P( 0x0dbe, 0x0e1e ),
  P( 0x0dbf, 0x0e1f ),
  P( 0x0dc0, 0x0e20 ),
  P( 0x0dc1, 0x0e21 ),
  P( 0x0dc2, 0x0e22 ),
  P( 0x0dc3, 0x0e23 ),
  P( 0x0dc4, 0x0e24 ),
  P( 0x0dc5, 0x0e25 ),
  P( 0x0dc6, 0x0e26 ),
  P( 0x0dc7, 0x0e27 ),
  P( 0x0dc8, 0x0e28 ),
  P( 0x0dc9, 0x0e29 ),
  P( 0x0dca, 0x0e2a ),
  P( 0x0dcb, 0x0e2b ),
  P( 0x0dcc, 0x0e2c ),
  P( 0x0dcd, 0x0e2d ),
  P( 0x0dce, 0x0e2e ),
  P( 0x0dcf, 0x0e2f ),
  P( 0x0dd0, 0x0e30 ),
  P( 0x0dd1, 0x0e31 ),
  P( 0x0dd2, 0x0e32 ),
  P( 0x0dd3, 0x0e33 ),
  P( 0x0dd4, 0x0e34 ),
  P( 0x0dd5, 0x0e35 ),
  P( 0x0dd6, 0x0e36 ),
  P( 0x0dd7, 0x0e37 ),
  P( 0x0dd8, 0x0e38 ),
  P( 0x0dd9, 0x0e39 ),
  P( 0x0dda, 0x0e3a ),
  P( 0x0ddf, 0x0e3f ),
  P( 0x0de0, 0x0e40 ),
  P( 0x0de1, 0x0e41 ),
  P( 0x0de2, 0x0e42 ),
  P( 0x0de3, 0x0e43 ),
  P( 0x0de4, 0x0e44 ),
  P( 0x0de5, 0x0e45 ),
  P( 0x0de6, 0x0e46 ),
  P( 0x0de7, 0x0e47 ),
  P( 0x0de8, 0x0e48 ),
  P( 0x0de9, 0x0e49 ),
  P( 0x0dea, 0x0e4a ),
  P( 0x0deb, 0x0e4b ),
  P( 0x0dec, 0x0e4c ),
  P( 0x0ded, 0x0e4d ),
  P( 0x0df0, 0x0e50 ),
  P( 0x0df1, 0x0e51 ),
  P( 0x0df2, 0x0e52 ),
  P( 0x0df3, 0x0e53 ),
  P( 0x0df4, 0x0e54 ),
  P( 0x0df5, 0x0e55 ),
  P( 0x0df6, 0x0e56 ),
  P( 0x0df7, 0x0e57 ),
  P( 0x0df8, 0x0e58 ),
  P( 0x0df9, 0x0e59 ),
  P( 0x0ea1, 0x3131 ),
  P( 0x0ea2, 0x3132 ),
  P( 0x0ea3, 0x3133 ),
  P( 0x0ea4, 0x3134 ),
  P( 0x0ea5, 0x3135 ),
  P( 0x0ea6, 0x3136 ),
  P( 0x0ea7, 0x3137 ),
  P( 0x0ea8, 0x3138 ),
  P( 0x0ea9, 0x3139 ),
  P( 0x0eaa, 0x313a ),
  P( 0x0eab, 0x313b ),
  P( 0x0eac, 0x313c ),
  P( 0x0ead, 0x313d ),
  P( 0x0eae, 0x313e ),
  P( 0x0eaf, 0x313f ),
  P( 0x0eb0, 0x3140 ),
  P( 0x0eb1, 0x3141 ),
  P( 0x0eb2, 0x3142 ),
  P( 0x0eb3, 0x3143 ),
  P( 0x0eb4, 0x3144 ),
  P( 0x0eb5, 0x3145 ),
  P( 0x0eb6, 0x3146 ),
  P( 0x0eb7, 0x3147 ),
  P( 0x0eb8, 0x3148 ),
  P( 0x0eb9, 0x3149 ),
  P( 0x0eba, 0x314a ),
  P( 0x0ebb, 0x314b ),
  P( 0x0ebc, 0x314c ),
  P( 0x0ebd, 0x314d ),
  P( 0x0ebe, 0x314e ),
  P( 0x0ebf, 0x314f ),
  P( 0x0ec0, 0x3150 ),
  P( 0x0ec1, 0x3151 ),
  P( 0x0ec2, 0x3152 ),
  P( 0x0ec3, 0x3153 ),
  P( 0x0ec4, 0x3154 ),
  P( 0x0ec5, 0x3155 ),
  P( 0x0ec6, 0x3156 ),
  P( 0x0ec7, 0x3157 ),
  P( 0x0ec8, 0x3158 ),
  P( 0x0ec9, 0x3159 ),
  P( 0x0eca, 0x315a ),
  P( 0x0ecb, 0x315b ),
  P( 0x0ecc, 0x315c ),
  P( 0x0ecd, 0x315d ),
  P( 0x0ece, 0x315e ),
  P( 0x0ecf, 0x315f ),
  P( 0x0ed0, 0x3160 ),
  P( 0x0ed1, 0x3161 ),
  P( 0x0ed2, 0x3162 ),
  P( 0x0ed3, 0x3163 ),
  P( 0x0ed4, 0x11a8 ),
  P( 0x0ed5, 0x11a9 ),
  P( 0x0ed6, 0x11aa ),
  P( 0x0ed7, 0x11ab ),
  P( 0x0ed8, 0x11ac ),
  P( 0x0ed9, 0x11ad ),
  P( 0x0eda, 0x11ae ),
  P( 0x0edb, 0x11af ),
  P( 0x0edc, 0x11b0 ),
  P( 0x0edd, 0x11b1 ),
  P( 0x0ede, 0x11b2 ),
  P( 0x0edf, 0x11b3 ),
  P( 0x0ee0, 0x11b4 ),
  P( 0x0ee1, 0x11b5 ),
  P( 0x0ee2, 0x11b6 ),
  P( 0x0ee3, 0x11b7 ),
  P( 0x0ee4, 0x11b8 ),
  P( 0x0ee5, 0x11b9 ),
  P( 0x0ee6, 0x11ba ),
  P( 0x0ee7, 0x11bb ),
  P( 0x0ee8, 0x11bc ),
  P( 0x0ee9, 0x11bd ),
  P( 0x0eea, 0x11be ),
  P( 0x0eeb, 0x11bf ),
  P( 0x0eec, 0x11c0 ),
  P( 0x0eed, 0x11c1 ),
  P( 0x0eee, 0x11c2 ),
  P( 0x0eef, 0x316d ),
  P( 0x0ef0, 0x3171 ),
  P( 0x0ef1, 0x3178 ),
  P( 0x0ef2, 0x317f ),
  P( 0x0ef3, 0x3181 ),
  P( 0x0ef4, 0x3184 ),
  P( 0x0ef5, 0x3186 ),
  P( 0x0ef6, 0x318d ),
  P( 0x0ef7, 0x318e ),
  P( 0x0ef8, 0x11eb ),
  P( 0x0ef9, 0x11f0 ),
  P( 0x0efa, 0x11f9 ),
  P( 0x0eff, 0x20a9 ),
  P( 0x13a4, 0x20ac ),
  P( 0x13bc, 0x0152 ),
  P( 0x13bd, 0x0153 ),
  P( 0x13be, 0x0178 ),
  P( 0x20ac, 0x20ac ),
  P( 0xfe50,    '`' ),
  P( 0xfe51, 0x00b4 ),
  P( 0xfe52,    '^' ),
  P( 0xfe53,    '~' ),
  P( 0xfe54, 0x00af ),
  P( 0xfe55, 0x02d8 ),
  P( 0xfe56, 0x02d9 ),
  P( 0xfe57, 0x00a8 ),
  P( 0xfe58, 0x02da ),
  P( 0xfe59, 0x02dd ),
  P( 0xfe5a, 0x02c7 ),
  P( 0xfe5b, 0x00b8 ),
  P( 0xfe5c, 0x02db ),
  P( 0xfe5d, 0x037a ),
  P( 0xfe5e, 0x309b ),
  P( 0xfe5f, 0x309c ),
  P( 0xfe63,    '/' ),
  P( 0xfe64, 0x02bc ),
  P( 0xfe65, 0x02bd ),
  P( 0xfe66, 0x02f5 ),
  P( 0xfe67, 0x02f3 ),
  P( 0xfe68, 0x02cd ),
  P( 0xfe69, 0xa788 ),
  P( 0xfe6a, 0x02f7 ),
  P( 0xfe6e,    ',' ),
  P( 0xfe6f, 0x00a4 ),
  P( 0xfe80,    'a' ), // XK_dead_a
  P( 0xfe81,    'A' ), // XK_dead_A
  P( 0xfe82,    'e' ), // XK_dead_e
  P( 0xfe83,    'E' ), // XK_dead_E
  P( 0xfe84,    'i' ), // XK_dead_i
  P( 0xfe85,    'I' ), // XK_dead_I
  P( 0xfe86,    'o' ), // XK_dead_o
  P( 0xfe87,    'O' ), // XK_dead_O
  P( 0xfe88,    'u' ), // XK_dead_u
  P( 0xfe89,    'U' ), // XK_dead_U
  P( 0xfe8a, 0x0259 ),
  P( 0xfe8b, 0x018f ),
  P( 0xfe8c, 0x00b5 ),
  P( 0xfe90,    '_' ),
  P( 0xfe91, 0x02c8 ),
  P( 0xfe92, 0x02cc ),
  P( 0xff80 /*XKB_KEY_KP_Space*/,     ' ' ),
  P( 0xff95 /*XKB_KEY_KP_7*/, 0x0037 ),
  P( 0xff96 /*XKB_KEY_KP_4*/, 0x0034 ),
  P( 0xff97 /*XKB_KEY_KP_8*/, 0x0038 ),
  P( 0xff98 /*XKB_KEY_KP_6*/, 0x0036 ),
  P( 0xff99 /*XKB_KEY_KP_2*/, 0x0032 ),
  P( 0xff9a /*XKB_KEY_KP_9*/, 0x0039 ),
  P( 0xff9b /*XKB_KEY_KP_3*/, 0x0033 ),
  P( 0xff9c /*XKB_KEY_KP_1*/, 0x0031 ),
  P( 0xff9d /*XKB_KEY_KP_5*/, 0x0035 ),
  P( 0xff9e /*XKB_KEY_KP_0*/, 0x0030 ),
  P( 0xffaa /*XKB_KEY_KP_Multiply*/,  '*' ),
  P( 0xffab /*XKB_KEY_KP_Add*/,       '+' ),
  P( 0xffac /*XKB_KEY_KP_Separator*/, ',' ),
  P( 0xffad /*XKB_KEY_KP_Subtract*/,  '-' ),
  P( 0xffae /*XKB_KEY_KP_Decimal*/,   '.' ),
  P( 0xffaf /*XKB_KEY_KP_Divide*/,    '/' ),
  P( 0xffb0 /*XKB_KEY_KP_0*/, 0x0030 ),
  P( 0xffb1 /*XKB_KEY_KP_1*/, 0x0031 ),
  P( 0xffb2 /*XKB_KEY_KP_2*/, 0x0032 ),
  P( 0xffb3 /*XKB_KEY_KP_3*/, 0x0033 ),
  P( 0xffb4 /*XKB_KEY_KP_4*/, 0x0034 ),
  P( 0xffb5 /*XKB_KEY_KP_5*/, 0x0035 ),
  P( 0xffb6 /*XKB_KEY_KP_6*/, 0x0036 ),
  P( 0xffb7 /*XKB_KEY_KP_7*/, 0x0037 ),
  P( 0xffb8 /*XKB_KEY_KP_8*/, 0x0038 ),
  P( 0xffb9 /*XKB_KEY_KP_9*/, 0x0039 ),
  P( 0xffbd /*XKB_KEY_KP_Equal*/,     '=' )
];


//////////////////////////////////////////////////////////////////////////
//////                       GLFW internal API                      //////
//////////////////////////////////////////////////////////////////////////

// Convert XKB KeySym to Unicode
int _glfwKeySym2Unicode(uint keysym) {
    int min = 0;
    int max = keysymtab.length;
    int mid;

    // First check for Latin-1 characters (1:1 mapping)
    if ((keysym >= 0x0020 && keysym <= 0x007e) ||
        (keysym >= 0x00a0 && keysym <= 0x00ff))
    {
        return keysym;
    }

    // Also check for directly encoded 24-bit UCS characters
    if ((keysym & 0xff000000) == 0x01000000)
        return keysym & 0x00ffffff;

    // Binary search in table
    while (max >= min)
    {
        mid = (min + max) / 2;
        if (keysymtab[mid].keysym < keysym)
            min = mid + 1;
        else if (keysymtab[mid].keysym > keysym)
            max = mid - 1;
        else
            return keysymtab[mid].ucs;
    }

    // No matching Unicode value found
    return -1;
}
